-- Utilisation du package Webpack Encore
    Permet de gérer les ressources web de type css, js ou média (images, vidéos...)

-- Utilisation
    * Ouvrir un terminal
    * se placer à la racine du projet
    * taper la commande suivante : 
        - yarn encore dev --watch (le --watch permet de mettre à jour les fichiers css et js du répertoire public/build automatiquement 
                                   à chaque modification des fichier js et scss présent dans le répertoire asset.
                                   Nul besoin de re-taper la commande après une modification d'un fichier js ou scss)

-- Intégration des fichiers css ou js dans twig

    -- CSS (en dehors du block css)
        {{ encore_entry_link_tags('app') }}
        {% block stylesheets %}
        {% endblock %}

    -- JS (en dehors du block js)
        {{ encore_entry_script_tags('app') }}
        {% block javascripts %}
        {% endblock %}

    -- 'app' désigne le nom du entrypoint définit dans le fichier webpack.config.js (fichier de configuration webpack)
        Dans notre cas : .addEntry('app', './assets/js/app.js') 

-- Lien externe
    * documentation officiel : https://symfony.com/doc/current/frontend.html

-- Utilisation d'une nouvelle librairie css/js
    On prends l'exemple de bootstrap :
        * on cherche le nom du paquet bootstrap sur le gestionnaire de paquet utilisé, ici nous utilisons yarn
        * on ajoute le paquet à l'aide de la commande suivant : yarn add bootstrap
        * on ajoute à notre fichier js principale (celui dans lequel on déclare toutes les librairies utilisées) app.js la ligne suivante :
                require('bootstrap'); (cette ligne ajoute à webpack le js de bootstrap)
        * on ajoute aux fichiers css qui en ont besoin le css bootstrap à l'aide de la commande suivante : @import "~bootstrap/scss/bootstrap";
            (la commande varie en fonction de la librairie)
        * penser a exécuter la commande yarn encore dev (si la commande yarn encore dev --watch n'est pas démarré)